const express = require("express");
let User = require("../models/User");
const bcrypt = require("bcryptjs");
const bodyParser = require("body-parser");
const cookieParser = require("cookie-parser");
const cors = require("cors");
const jwt = require("jsonwebtoken");

const app = express();
const saultRounds = process.env.SALT_ROUNDS;
const helmet = require("helmet");
const csrf = require("csurf");

const sanitizeHtml = require("sanitize-html");

const csrfProtection = csrf({ cookie: true });
app.use(cookieParser());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(helmet());

app.get("/transfer", csrfProtection, (req, res) => {
  res.send(`
  <html>
  <form id="myForm" action="/transfer" method="POST" target="_blank">
  Account:<input type="text" name="account" value="your friend"/><br/>
  Amount:<input type="text" name="amount" value="$5000"/>
  <input type="hidden" name="_csrf" value="${req.csrfToken()}"/>
    <button type="submit">Transfer Money</button>
  </form>
  </html>
  `);
});

app.post("/transfer", csrfProtection, (req, res) => {
  console.log(req.body);
  if (isAuthenticated(req.cookies["session"])) {
    // Transfer money and insert data in the database
    console.info("Transferring Money...");
    res.send("OK");
  } else {
    res.status(400).send("Bad Request");
  }
});

app.post("/register", (req, res) => {
  const username = req.body.username;
  const email = req.body.email;
  const usertype = req.body.userType;
  const riders = req.body.riders;

  bcrypt.hash(req.body.password, saultRounds, (err, hash) => {
    const password = hash;
    const sanitizedEmail = req.body.email;
    const query = { email: sanitizedEmail };
    const newUser = new User({
      username,
      email,
      password,
      usertype,
      riders,
    });
    User.findOne(query)
      .then((user) => {
        if (user) {
          res.send({ Error: "Email aready in use" });
        } else {
          newUser
            .save()
            .then((user) => {
              console.log(user);
              res.send({ message: "Registration Success" });
            })
            .catch((err) => {
              res.send({ Error: "user details missing" });
            });
        }
      })
      .catch((error) => {
        res.send("Error in user creation");
      });
  });
});

app.post("/login", async (req, res) => {
  const secretkey = process.env.SECRET_KEY;
  const sanitizedEmail = sanitizeHtml(req.body.email);
  const query = { email: sanitizedEmail };
  await User.findOne(query)
    .then(
      //find corresponding email form users list
      (user) => {
        //since the password in database is in encrypted format we have to get it and decrypt to compre with user entered password
        //That's what we are doing here with bcrypt.compare method
        bcrypt.compare(req.body.password, user.password, (err, result) => {
          // compare passwords
          if (err || !result) {
            res.send({ message: "Password not valid" });
          } else {
            jwt.sign({ user }, secretkey, (err, token) => {
              res.json({ token, usertype: user.usertype });
            });
          }
        });
      }
    )
    .catch((error) => {
      res.send({ message: "Invalid Email" });
    });
});

app.get("/getAllCustomers", (req, res) => {
  console.log(req.headers["data"]);
  var search = req.headers["data"];

  if (req.headers["data"] == "") {
    User.find({})
      .then((data) => {
        res.status(200).send(data);
      })
      .catch((error) => {
        res.status(500).send(error.message);
      });
    return;
  } else {
    User.find({ email: { $regex: search } })
      .then((data) => {
        res.status(200).send(data);
      })
      .catch((error) => {
        res.status(500).send(error.message);
      });
  }
});

app.delete("/delete/:customerID", (req, res) => {
  User.findByIdAndDelete({ _id: req.params.customerID })
    .then((data) => {
      res.status(200).send("Customer deleted succesfully");
    })
    .catch((err) => {
      res.status(500).send(err.message);
    });
});

app.put("/profileUpdate", (req, res) => {
  console.log(req.body.username, req.body.password);

  bcrypt.hash(req.body.password, saultRounds, (err, hash) => {
    if (err) {
      res
        .status(500)
        .send({ message: "An error occurred while updating profile details" });
      return;
    }
    const newpassword = hash;

    User.findByIdAndUpdate(
      { _id: req.body.userID },
      {
        username: sanitizeHtml(req.body.username),
        password: newpassword,
      }
    )
      .then((respond) => {
        res.send({ message: "Profile details updated" });
      })
      .catch((err) => {
        const error = err.toString();
        res.send("Profile details update failed");
      });
  });
});

app.get("/post", verifyToken, (req, res) => {
  if (req.user) {
    res.json(req.user);
  } else {
    res.send({ message: "Token not valid" });
  }
});

//verify token
function verifyToken(req, res, next) {
  const secretkey = process.env.SECRET_KEY;
  //Get auth header value
  const bearerHeader = req.headers["authorization"];
  const token = bearerHeader && bearerHeader.split(" ")[1];
  //checking if there is a token or not
  if (token == null) {
    return res.sendStatus(401);
  } else {
    jwt.verify(token, secretkey, (err, authData) => {
      if (err) {
        res.sendStatus(403);
        console.log(err);
      } else {
        req.user = authData;
        next();
      }
    });
  }
}

////////////
app.get("/getOne/:id", (req, res) => {
  const id = req.params.id;
  User.findOne({ riders: id })
    .populate("riders", "riderName")
    .then((data) => {
      res.send(data);
    })
    .catch((error) => {
      res.status(500).send(error.message);
    });
});

const isAuthenticated = (session) => {
  // We should check session in a store or something like that
  return session === "valid_user";
};

module.exports = app;
