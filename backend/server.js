const express = require("express");
const mongoose = require("mongoose");
const bodyParser = require("body-parser");
const cors = require("cors");
const path = require("path");
const dotenv = require("dotenv");
const helmet = require("helmet");

const passport = require("passport");
const session = require("express-session");
const OAuth2Strategy = require("passport-oauth2").Strategy;

const app = express();
dotenv.config();
app.use(cors());

app.use(bodyParser.json());
const PORT = process.env.PORT || 8070;
const URL = process.env.MONGODB_URL;
const OauthClientID = process.env.OAUTH_CLIENT_ID;
const OAuthClientSecret = process.env.OAUTH_CLIENT_SECRET;

app.use(
  session({
    secret: "your-secret-key",
    resave: true,
    saveUninitialized: true,
  })
);

app.use(passport.initialize());
app.use(passport.session());

passport.use(
  new OAuth2Strategy(
    {
      authorizationURL: "https://accounts.google.com/o/oauth2/auth",
      tokenURL: "https://accounts.google.com/o/oauth2/token",
      clientID: OauthClientID,
      clientSecret: OAuthClientSecret,
      callbackURL: "http://localhost:8070/auth/oauth2/callback",
    },
    (accessToken, refreshToken, profile, done) => {
      console.log(accessToken);
      console.log(refreshToken);
      console.log(profile);
      return done(null, profile);
    }
  )
);

app.use(bodyParser.json({ limit: "30mb", extended: true }));
app.use(bodyParser.urlencoded({ limit: "30mb", extended: true }));
const productRouter = require("./routes/productRoutes");

mongoose.connect(URL, {
  useCreateIndex: true,
  useNewUrlParser: true,
  useUnifiedTopology: true,
  useFindAndModify: false,
});

const connection = mongoose.connection;

connection.once("open", () => {
  console.log("Mongo DB Connection success");
});

app.use(
  helmet({
    contentSecurityPolicy: {
      directives: {
        scriptSrc: ["'self'", (req, res) => `'nonce-${res.locals.cspNonce}'`],
      },
    },
  })
);

passport.serializeUser((user, done) => {
  done(null, user);
});

passport.deserializeUser((user, done) => {
  done(null, user);
});

// Route to initiate OAuth2 authentication
app.get("/auth/oauth2", passport.authenticate("oauth2"));

// OAuth2 callback
app.get(
  "/auth/oauth2/callback",
  passport.authenticate("oauth2", {
    successRedirect: "/profile",
    failureRedirect: "/login", // Redirect to login page on failure
  })
);

// Profile route
app.get("/profile", (req, res) => {
  if (req.isAuthenticated()) {
    // Access user data from req.user
    res.send(`Welcome, ${req.user.displayName}!`);
  } else {
    // Handle unauthenticated access
    res.redirect("/login");
  }
});

const userRouter = require("./src/routes/User");
app.use("/user", userRouter);

app.route("/").get((req, res) => {
  res.send("SLIIT SPM");
});

const RiderAPI = require("./API/Rider.Api.js");
app.use("/rider", RiderAPI());

const OrderAPI = require("./API/Order.Api.js");
app.use("/order", OrderAPI());

const CompleteOrderAPI = require("./API/completeOrder.Api");
app.use("/complete", CompleteOrderAPI());

const PaymentAPI = require("./API/Payment.Api");
app.use("/make", PaymentAPI());

const WishlistItems = require("./routes/wishlistRouter");
app.use("/wishlist", WishlistItems);

app.use("/product", productRouter);

const CartItems = require("./routes/cartRouter");
const { log } = require("nodemon/lib/utils");
app.use("/cart", CartItems);

const Coupons = require("./routes/couponRoute");
app.use("/coupon", Coupons);

const Notifications = require("./routes/notificationsRoute");
app.use("/notification", Notifications);

app.listen(PORT, () => {
  console.log(`Server is up and running on port ${PORT}`);
});
